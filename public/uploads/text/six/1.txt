

Cahier des charges —EduGuinée (Pages +
fonctionnalités)
1) 
Contexte & objectifs
EduGuinée est  une  plateforme  web  (mobile‑friendly)  pour  aider  les  élèves  de  6ᵉ, 10ᵉ  (BEPC) et 
Terminale à préparer leurs examens. Elle offre des PDF à télécharger, cours vidéo, sujets corrigés, et 
quiz. Le projet démarre en React (frontend) et Node.js (backend).
2) Pages principales et contenu attendu
1. Page d’accueil
2. Page de connexion / inscription
Connexion : Email + mot de passe.
Inscription : Nom complet, email, mot de passe, choix du rôle (Élève/Enseignant).
Mot de passe oublié (envoi lien reset).
3. Page catalogue (par niveau)
Sélecteur Niveau → Option → Matière → Chapitre.
Affichage ressources sous forme de cartes :
Type (PDF, Vidéo, Quiz, Annale).
Titre, description courte.
Boutons Voir / Télécharger / Commencer Quiz.
Filtres par type (PDF, vidéo, quiz), par année (annales), par durée (vidéos).
4. Page ressource (détail)
Informations : Titre, description, matière, niveau, option.
Si PDF → bouton Télécharger.
Si Vidéo → lecteur vidéo intégré (React Player).
Si Quiz → bouton Commencer le quiz.
Ressources liées en bas.
5. Page quiz
Affichage questions (QCM/QCU, vrai‑faux).
Chrono optionnel.
• 
•
•
Bannière de bienvenue avec des eleves de la 6,10 et terminal en tenue(EduGuinée, slogan : 
“
Apprends,Progresse,Réussis”). • Accès rapide aux niveaux (6ᵉ, 10ᵉ, Terminale).
 CTA : Boutons Connexion / Inscription.
• Footer avec liens : Contactez-nous, FAQ,Apropos.
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
1

Navigation question suivante/précédente.
Bouton Soumettre → résultat immédiat (score, corrigés).
6. Page progression élève (dashboard)
Historique téléchargements (PDF).
Historique visionnage vidéos.
Scores aux quiz.
Statistiques simples : progression par matière, badges.
7. Page annales & corrigés
Liste des sujets d’examens (année, matière, type : BEPC/Bac).
Bouton Télécharger sujet + Télécharger corrigé.
8. Page enseignant (ajout de contenu)
Formulaire d’upload PDF : titre, niveau, option, matière, chapitre, description.
Upload Vidéo (fichier ou lien YouTube non listé).
Création Quiz (titre, durée, questions).
Gestion de ses propres contenus (statut : brouillon / publié).
9. Page administration (back‑office)
3) Contenus pédagogiques
4) Fonctionnalités clés par rôle
Élève
Consulter/télécharger ressources.
Réviser avec vidéos.
Faire quiz + voir résultats.
Suivre progression.
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
• 
•
Gestion utilisateurs (élèves).
• Validation des ressources uploadées.
 Gestion catalogue (niveaux, options, matières, chapitres). 
• Statistiques globales : téléchargements, vues vidéos, quiz complétés.
•
• 
•
• Niveaux : 6ᵉ, 10ᵉ, Terminale.
 Options Terminale : SM
, SE, SS.
• Ressources : PDF (cours, exercices), vidéos, quiz, 
annales,anciens sujet
• 
• 
• 
• 
2

Administrateur
5) Technologies prévues
Frontend : React + Tailwind + React Router.
Backend : Node.js + Express + MongoDB.
Stockage fichiers : Cloud (S3 compatible).
Authentification : JWT + bcrypt.
PWA pour installation sur mobile.
6) Roadmap (MVP)
Authentification (connexion, inscription).
Catalogue par niveau → matière → ressource.
Téléchargement PDF + lecture vidéos.
Quiz basiques (QCM).
Tableau de bord élève.
Back‑office minimal.
 Chaque 
page listée ci‑dessus correspond à un livrable avec des composants React dédiés (frontend)
+ routes API Express (backend).
20) Spécifications par page (MVP + évolutions)
Chaque  page  liste  :  Objectif,  Contenus/Composants,  Interactions,  Données/API,
Critères d’acceptation.
20.1 Accueil (Home)
Objectif: Orienter rapidement l’élève vers son niveau et les ressources clés. Contenus/Composants: -
Bandeau héros (titre, sous‑titre, CTA « Commencer ») - Sélecteur Niveau (6ᵉ, 10ᵉ, Terminale) + Options/
Filières si Terminale - Raccourcis : Annales, Derniers PDF, Vidéos populaires - Bloc « Comment ça
marche ? » (3 étapes) Interactions: - Choix du niveau → redirection Catalogue pré‑filtré - Cliquer sur
une ressource → Détail ressource Données/API: - GET 
/api/resources?sort=popular&limit=8 -
GET  
/api/levelsCritères d’acceptation: - En 1 clic depuis l’accueil, accéder au catalogue d’un
niveau. - Afficher au moins 6 ressources « populaires » si dispo.
• 
• Modérer et valider contenus. 
Gérer
 niveaux & utilisateurs. • 
Consulter statistiques.
• 
• 
• 
• 
• 
1. 
2. 
3. 
4. 
5. 
6. 
3

20.2 Authentification (Connexion / Inscription / Mot de passe)
Objectif: Créer un compte élève/enseignant, se connecter en sécurité.  Contenus/Composants: -
Formulaire Connexion (email, mot de passe) - Formulaire Inscription (nom complet, email, mot de
passe) - Lien Mot de passe oublié (email) Interactions: - Validation front (Yup) + messages d’erreur
clairs - Token JWT stocké httpOnly cookie ou storage sécurisé Données/API: - POST 
/api/auth/
register,   POST   /api/auth/login,   POST   /api/auth/forgot-passwordCritères
d’acceptation: - Après login, redirection vers Dashboard élève. - Erreurs serveur affichées en < 1 s.
20.3 Catalogue (Parcourir)
Objectif: Parcourir  Niveau → Option → Matière → Chapitre  et filtrer par  type  (PDF/vidéo/quiz/
annales) et année. Contenus/Composants: - Filtres horizontaux (Niveau, Option, Matière, Chapitre,
Type, Année) - Liste  cartes ressources  (titre, type, durée/poids, année, tags) - Barre  Recherche
(mot‑clé) - Pagination ou scroll infini Interactions: - Modifier filtres → recharge des données (React
Query) - Marquer Favori (icône) si connecté Données/API: - GET 
/api/levels|options|subjects|
chapters   -   GET   /api/resources?level=...&type=...&year=...&q=...Critères
d’acceptation: - Appliquer/retirer un filtre < 300 ms côté UI (optimisme + skeleton) - Afficher 0‑state
utile s’il n’y a pas de résultat
20.4 Détail ressource
Objectif: Consulter/ouvrir une ressource spécifique.  Contenus/Composants: - En‑tête (titre, type,
niveau/matière, année, tags) - Zone Lecteur vidéo OU bouton Télécharger PDF - Description + objectifs
+ pré‑requis - Ressources liées (même chapitre/matière) Interactions: - Clic Télécharger → enregistre
un événement + délivre URL signée - Lecture vidéo avec reprise de position Données/API: - GET 
/api/
resources/:id  -   POST  /api/resources/:id/download  (PDF)  Critères  d’acceptation:   -   Le
téléchargement démarre en ≤ 2 clics et log « Download » est créé.
20.5 Lecteur vidéo
Objectif: Streaming fluide et contrôles ergonomiques. Contenus/Composants: - Player (play/pause,
avance/retour 10s, vitesse 0.5×–2×, plein écran) - Barre de progression avec reprise Interactions: -
Sauvegarde position toutes les 10 s Données/API: - PATCH 
/api/users/me/progress (resourceId,
positionSec) Critères d’acceptation: - Reprendre à ±2 s de la dernière position sur nouvel accès.
20.6 Téléchargement/lecteur PDF
Objectif: Permettre lecture (intégrée) ou téléchargement sécurisé. Contenus/Composants: - Aperçu
PDF (si possible) + bouton Télécharger Interactions: - Compteur de téléchargements Données/API: -
POST 
/api/resources/:id/downloadCritères d’acceptation: - URL signée expirant ≤ 5 min.
20.7 Quiz (Flux complet)
Objectif: Évaluer l’élève et fournir un corrigé immédiat. Contenus/Composants: - Écran Consignes
(titre, durée, barème, nombre de questions) -  Écran questions  (1 par page), navigation suivante/
précédente - Résultats + score + corrigé (explications) Interactions: - Chrono optionnel, autosave des
réponses   -   Soumission   bloque   les   modifications   et   calcule   score  Données/API:   -   GET  
/api/
quizzes/:id  |   POST  /api/quizzes/:id/attempts  |   POST  /api/quizzes/:id/submit
4

Critères d’acceptation: - Score affiché immédiatement avec % de réussite et bonnes réponses mises en
évidence.
20.8 Annales (Sujets d’examens)
Objectif: Accéder aux sujets officiels/maison par année,  session et   matière.  Contenus/Composants: -
Filtres (Année, Session, Matière, Type: sujet/corrigé) - Liste de sujets (vignette PDF + métadonnées)
Interactions: - Téléchargement sujet/corrigé comme 20.6  Données/API: - GET  /api/resources?
type=annale&year=...&subject=...Critères d’acceptation: - Au moins 3 années disponibles par
matière (jeu de démo pour MVP).
20.9 Résultats de recherche
Objectif: Centraliser la recherche plein‑texte.  Contenus/Composants: - Champ recherche global +
résultats   regroupés   par   type   Données/API:   -   GET   /api/search?q=...   (ou
/api/resources?q=...) Critères d’acceptation: - Mise en surbrillance du mot‑clé dans les extraits.
20.10 Dashboard élève
Objectif: Suivre la progression personnelle.  Contenus/Composants: - Cartes :  Dernières vidéos, 
Derniers PDF,  Derniers quiz - Graphique simple : scores récents - Liste FavorisDonnées/API: - GET /
api/users/me/activity  | GET  /api/users/me/favoritesCritères d’acceptation: - Les 10
dernières activités s’affichent avec date et type.
20.11 Espace Enseignant (upload & gestion)
Objectif: Déposer, éditer et proposer à publication des contenus. Contenus/Composants: - Tableau des
contenus (statut: draft/review/published) - Formulaire  Upload PDF/Vidéo  (drag‑drop, métadonnées
complètes) - Éditeur de Quiz (questions, choix, corrigés) Données/API: - POST /api/resources |
PATCH /api/resources/:id | POST /api/quizzesCritères d’acceptation: - Un contenu en «
draft » ne s’affiche pas côté public.
20.12 Back‑office Admin
Objectif: Modérer et piloter la plateforme.  Contenus/Composants: - Tableau  Modération  (filtres,
actions: valider/refuser/archiver) - Gestion Utilisateurs (rôles) - Gestion Niveaux/Options/Matières/
Chapitres  -   Stats  (téléchargements, vues, réussite quiz)  Données/API: -  GET/POST/PATCH /api/
admin/*  (selon ressources)  Critères d’acceptation: - Changement de statut « published » visible
immédiatement côté public (cache invalidé).
20.13 Pages CMS / Info
Objectif: Informations statiques éditables.  Pages:   À propos,   FAQ ,   Contact,   CGU/Confidentialité
Données/API: - GET  /api/cms/pages/:slug  - POST/PATCH (admin)  /api/cms/pages/:slug
Critères d’acceptation: - Contact envoie email ou crée un ticket interne.
5

20.14 Onboarding & Notifications
Objectif: Guider les nouveaux utilisateurs.  Contenus/Composants: - Tutoriel 3 étapes (tooltips) -
Notifications toast (succès/erreur)  Critères d’acceptation: - Onboarding non intrusif, skippable, ne
réapparaît pas après complétion.
20.15 États d’erreur & Offline
Objectif: Résilience et messages utiles.  Contenus/Composants: - 404, 500, état « hors connexion
» (PWA) Critères d’acceptation: - Les erreurs API affichent un message clair + action de retry.
20.16 Navigation & Layout (global)
Objectif: Cohérence UI. Composants globaux: - Navbar (logo, Recherche, Liens: Accueil, Cours, Vidéos,
Annales, Quiz, Profil) - Footer (liens utiles, contact, réseaux) - Breadcrumb (Catalogue/Détail) Critères
d’acceptation: - Navigation clavier accessible, focus visible.
20.17 Mobile‑first & PWA
Objectif: Expérience optimale sur mobile. Exigences: - Breakpoints Tailwind, boutons ≥ 44px, police
lisible - PWA: manifest.json, service worker (cache statique de base) Critères d’acceptation: - Score
Lighthouse mobile ≥ 85 (Perf ≥ 70 au MVP).
20.18 Évolutions (P1/P2)
Parent/Tuteur: vue lecture seule de la progression
Badges & gamification
Sous‑titres & transcription des vidéos
Mode hors‑ligne avancé (chapitres épinglés)
Annexe A — Checklists par page (à cocher en dev) - [ ] Home : CTA → Catalogue pré‑filtré - [ ] Auth :
redirection post‑login + erreurs claires - [ ] Catalogue : filtres synchronisés URL (query params) - [ ]
Détail : reprise vidéo / download signé - [ ] Quiz : autosave réponses + corrigé - [ ] Annales : filtres
année/matière - [ ] Dashboard : activité 10 derniers items - [ ] Enseignant : workflow draft → review →
published - [ ] Admin : modération + stats de base - [ ] PWA : manifest + SW + icône
Annexe B — Routing (Front React, exemple)
/
/auth/login
/auth/register
/catalogue
/catalogue/:level/:option?/:subject?/:chapter?
/resource/:id
/quiz/:id
/annales
/dashboard
/teacher
/admin
• 
• 
• 
• 
6

/cms/:slug
/* (404)
7